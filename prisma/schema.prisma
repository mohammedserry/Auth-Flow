// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  EMAIL_PASSWORD
  GOOGLE
  GITHUB
}

model User {
  id                String              @id @default(uuid())
  firstName         String?
  lastName          String?
  email             String              @unique
  password          String?
  isEmailVerified   Boolean             @default(false)
  provider          AuthProvider        @default(EMAIL_PASSWORD)
  verificationToken VerificationToken[]
  refreshTokens     RefreshToken[]
  oauthAccounts     OAuthAccounts[]
  todos             Todo[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@map("users")
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expires   DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("verification_tokens")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("refresh_tokens")
}

model OAuthAccounts {
  id                String       @id @default(uuid())
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider          AuthProvider
  providerAccountId String
  createdAt         DateTime     @default(now())

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("oauth_accounts")
}

model Todo {
  id          String   @id @default(uuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  priority    Priority @default(MEDIUM)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("todos")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
